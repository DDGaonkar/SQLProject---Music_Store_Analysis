/* QUESTION SET 1 - EASY*/

/*Q1: WHO IS THE SENIOR MOST EMPLOYEE BASED ON JOB TITLE?*/

SELECT * FROM EMPLOYEE
ORDER BY LEVELS DESC
LIMIT 1 --SHOWS ONLY ONE OUTPUT

/*Q2: WHICH COUNTRIES HAVE THE MOST INVOICES?*/

SELECT COUNT(*) AS C, BILLING_COUNTRY
FROM INVOICE
GROUP BY BILLING_COUNTRY
ORDER BY C DESC

/*Q3: WHAT ARE TOP 3 VALUES OF TOTAL INVOICE?*/
SELECT * FROM INVOICE
ORDER BY TOTAL DESC
LIMIT 3

/*Q4: WHICH CITY HAS THE BEST CUSTOMERS? 
WE WOULD LIKE TO THROW A PROMOTIONAL MUSIC FESTIVAL IN THE CITY WE MADE THE MOST MONEY. 
WRITE A QUERY THAT RETURNS ONE CITY THAT HAS THE HIGHEST SUM OF INVOICE TOTALS. 
RETURN THE CITY NAME AND SUM OF ALL INVOICE TOTALS. */

SELECT SUM(TOTAL) AS INVOICE_TOTAL, BILLING_CITY
FROM INVOICE
GROUP BY BILLING_CITY
ORDER BY INVOICE_TOTAL DESC

/*Q5: WHO IS THE BEST CUSTOMER? THE CUSTOMER WHO HAS SPENT THE MOST MONEY WILL BE 
DECLARED THE BEST CUSTOMER. WRITE A QUERY THAT RETURNS THE PERSON WHO HAS SPENT THE 
MOST MONEY*/
SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME, SUM(INVOICE.TOTAL) AS TOTAL
FROM CUSTOMER JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
GROUP BY CUSTOMER.CUSTOMER_ID
ORDER BY TOTAL DESC
LIMIT 1


/*QUESTION SET 2 - MODERATE*/

/*Q1: WRITE QUERY TO RETURN THE EMAIL, FIRST NAME, LAST NAME, & GENRE OF ALL ROCK MUSIC 
LISTENERS. RETURN YOUR LIST ORDERED ALPHABETICALLY BY EMAIL STARTING WITH A*/

SELECT DISTINCT EMAIL, FIRST_NAME, LAST_NAME FROM CUSTOMER
JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
JOIN INVOICE_LINE ON INVOICE.INVOICE_ID = INVOICE_LINE.INVOICE_ID
WHERE TRACK_ID IN(
	SELECT TRACK_ID FROM TRACK
	JOIN GENRE ON TRACK.GENRE_ID = GENRE.GENRE_ID
	WHERE GENRE.NAME LIKE 'ROCK'
)
ORDER BY EMAIL;


/*Q2: LET'S INVITE THE ARTISTS WHO HAVE WRITTEN THE MOST ROCK MUSIC IN OUR DATASET. WRITE A 
QUERY THAT RETURNS THE ARTIST NAME AND TOTAL TRACK COUNT OF THE TOP 10 ROCK BANDS*/

SELECT ARTIST.ARTIST_ID, ARTIST.NAME, COUNT(ARTIST.ARTIST_ID) AS NUMBEROFSONGS FROM TRACK
JOIN ALBUM ON ALBUM.ALBUM_ID = TRACK.ALBUM_ID
JOIN ARTIST ON ARTIST.ARTIST_ID = ALBUM.ARTIST_ID
JOIN GENRE ON GENRE.GENRE_ID = TRACK.GENRE_ID
WHERE GENRE.NAME LIKE 'ROCK'
GROUP BY ARTIST.ARTIST_ID
ORDER BY NUMBEROFSONGS DESC
LIMIT 10;

/*Q3: RETURN ALL THE TRACK NAMES THAT HAVE A SONG LENGTH LONGER THAN THE AVERAGE SONG LENGTH. 
RETURN THE NAME AND MILLISECONDS FOR EACH TRACK. ORDER BY THE SONG LENGTH WITH THE 
LONGEST SONGS LISTED FIRST*/

SELECT NAME, MILLISECONDS FROM TRACK
WHERE MILLISECONDS > (SELECT AVG(MILLISECONDS) AS AVGTRACKLENGTH FROM TRACK)
ORDER BY MILLISECONDS DESC;

/*QUESTION SET 3 - ADVANCE*/

/*Q1: FIND HOW MUCH AMOUNT SPENT BY EACH CUSTOMER ON ARTISTS? WRITE A QUERY TO RETURN
CUSTOMER NAME, ARTIST NAME AND TOTAL SPENT*/

WITH BEST_SELLING_ARTIST AS (
	SELECT ARTIST.ARTIST_ID AS ARTIST_ID, ARTIST.NAME AS ARTIST_NAME, SUM(INVOICE_LINE.UNIT_PRICE * INVOICE_LINE.QUANTITY) AS TOTAL_SALES
	FROM INVOICE_LINE 
	JOIN TRACK ON TRACK.TRACK_ID = INVOICE_LINE.TRACK_ID
	JOIN ALBUM ON ALBUM.ALBUM_ID = TRACK.ALBUM_ID
	JOIN ARTIST ON ARTIST.ARTIST_ID = ALBUM.ARTIST_ID
	GROUP BY 1
	ORDER BY 3 DESC
)	
SELECT CUSTOMER.CUSTOMER_ID AS CUSTOMER_ID, CUSTOMER.FIRST_NAME AS CUSTOMER_FIRSTNAME, CUSTOMER.LAST_NAME AS CUSTOMER_LASTNAME, BEST_SELLING_ARTIST.ARTIST_NAME AS ARTIST_NAME, SUM(INVOICE_LINE.UNIT_PRICE*INVOICE_LINE.QUANTITY) AS AMOUNT_SPENT
FROM CUSTOMER
JOIN INVOICE ON INVOICE.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID
JOIN INVOICE_LINE ON INVOICE_LINE.INVOICE_ID = INVOICE.INVOICE_ID
JOIN TRACK ON TRACK.TRACK_ID = INVOICE_LINE.TRACK_ID
JOIN ALBUM ON ALBUM.ALBUM_ID = TRACK.ALBUM_ID
JOIN BEST_SELLING_ARTIST ON BEST_SELLING_ARTIST.ARTIST_ID = ALBUM.ARTIST_ID
GROUP BY 1, 2, 3, 4
ORDER BY 5 DESC;

/*Q2: WE WANT TO FIND OUT THE MOST POPULAR MUSIC GENRE FOR EACH COUNTRY. WE DETERMINE THE 
MOST POPULAR GENRE AS THE GENRE WITH THE HIGHEST AMOUNT OF PURCHASES. WRITE A QUERY 
THAT RETURNS EACH COUNTRY ALONG WITH THE TOP GENRE. FOR COUNTRIES WHERE THE MAXIMUM 
NUMBER OF PURCHASES IS SHARED RETURN ALL GENRES*/

/*METHOD 1*/
WITH POPULAR_GENRE AS (
	SELECT COUNT(INVOICE_LINE.QUANTITY) AS PURCHASES, CUSTOMER.COUNTRY, GENRE.NAME, GENRE.GENRE_ID, 
	ROW_NUMBER() OVER(PARTITION	BY CUSTOMER.COUNTRY ORDER BY COUNT(INVOICE_LINE.QUANTITY) DESC) AS ROWNO
	FROM CUSTOMER 
	JOIN INVOICE ON INVOICE.CUSTOMER_ID = CUSTOMER. CUSTOMER_ID
	JOIN INVOICE_LINE ON INVOICE_LINE.INVOICE_ID = INVOICE.INVOICE_ID
	JOIN TRACK ON TRACK.TRACK_ID = INVOICE_LINE.TRACK_ID
	JOIN GENRE ON GENRE.GENRE_ID = TRACK.GENRE_ID
	GROUP BY 2, 3, 4
	ORDER BY 2 ASC, 1 DESC
)
SELECT * FROM POPULAR_GENRE WHERE ROWNO <=1

/*METHOD 2 - USING RECURSIVE*/

WITH RECURSIVE
	SALES_PER_COUNTRY AS(
		SELECT COUNT(*) AS PURCHASES_PER_GENRE, CUSTOMER.COUNTRY, GENRE.NAME, GENRE.GENRE_ID
		FROM INVOICE_LINE
		JOIN INVOICE ON INVOICE.INVOICE_ID = INVOICE_LINE.INVOICE_ID
		JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
		JOIN TRACK ON TRACK.TRACK_ID = INVOICE_LINE.TRACK_ID
		JOIN GENRE ON GENRE.GENRE_ID = TRACK.GENRE_ID
		GROUP BY 2,3,4
		ORDER BY 2
	),
	MAX_GENRE_PER_COUNTRY AS (SELECT MAX(PURCHASES_PER_GENRE) AS MAX_GENRE_NUMBER, COUNTRY
		FROM SALES_PER_COUNTRY
		GROUP BY 2
		ORDER BY 2)

SELECT SALES_PER_COUNTRY.* 
FROM SALES_PER_COUNTRY
JOIN MAX_GENRE_PER_COUNTRY ON SALES_PER_COUNTRY.COUNTRY = MAX_GENRE_PER_COUNTRY.COUNTRY
WHERE SALES_PER_COUNTRY.PURCHASES_PER_GENRE = MAX_GENRE_PER_COUNTRY.MAX_GENRE_NUMBER;

/*Q3: Write a query that determines the customer that has spent the most on music for each 
country. Write a query that returns the country along with the top customer and how
much they spent. For countries where the top amount spent is shared, provide all 
customers who spent this amount*/

with recursive
	customer_with_company as (
		select invoice.customer_id, first_name, last_name, billing_country, sum(total) as total_spending
		from invoice
		join customer on customer.customer_id = invoice.customer_id
		group by 1, 2, 3, 4
		order by 2, 3 desc),
	country_max_spending as (
		select billing_country, max(total_spending) as max_spending
		from customer_with_company
		group by billing_country)
		
select cc.billing_country, cc.total_spending, cc.first_name, cc.last_name
from customer_with_company cc
join country_max_spending ms
on cc.billing_country = ms.billing_country
where cc.total_spending = ms.max_spending
order by 1;

